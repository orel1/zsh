#compdef stow chkstow

#
# A zsh completion script for GNU stow (https://www.gnu.org/software/stow/)
#

__stow_complete_packages() {
  local stow_pkg_list=( $1/*(-/N:t) )
  if [[ ${#stow_pkg_list} -gt 0 ]]; then
    _values -C "packages from $1" ${stow_pkg_list[@]}
  else
    _message "no packages found in $1"
  fi
}

_stow(){
  local context state line curcontext="$curcontext" ret=1
  typeset -A opt_args
  # Others local variables
  local stow_dir arguments

  arguments=(
    '(- *)'{--help,-h}'[show help]'
    '(- *)'{--version,-V}'[show version number]'
    '(-d --dir)'{-d+,--dir=}'[set the stow dir (default is current dir)]:stow dir:_files -/'
    '(-t --target)'{-t+,--target=}'[set the target dir (default is parent of stow dir)]:target dir:_files -/'
    '*'{-S,--stow}'[stow the package names that follow]:stow package:->stow_package'
    '*'{-D,--delete}'[unstow the package names that follow]:stow package:->stow_package'
    '*'{-R,--restow}'[restow (unstow and stow again) the package names that follow]:stow package:->stow_package'
    '--adopt[adopt already existing plain file]'
    '--ignore=[ignore files ending with this perl regex]:regexp:'
    "--defer=[don't stow files beginning with this perl regex]:regexp:"
    '--override=[force stowing files beginning with this perl regex]:regexp:'
    '--no-folding[disable any further tree folding or tree refolding]'
    '(-p --compat)'{-p,--compat}'[use legacy algorithm for unstowing]'
    '(-n -no --simulate)'{-n,--no,--simulate}'[do not actually make any filesystem changes]'
    '(-v --verbose)'{-v,--verbose}'[increase or set the level of verbosity (from 0 to 5)]'
    '*:stow package:->stow_package'
  )

  if (( ${+commands[stow]} )) ; then
    if [[ "$( _call_program version stow --version 2>/dev/null )" =~ "stow\ \(GNU\ Stow\)\ version\ ([0-9]+\.[0-9]+\.[0-9]+)" ]]; then
      autoload -Uz is-at-least
      if is-at-least 2.3.0 "$match[1]" ; then
        arguments+=( '--dotfiles[enable special handling for dotfiles]' )
      fi
    fi
  fi

  _arguments -s -W -C $arguments && ret=0

  case $state in
    (stow_package)
      if (( $+opt_args[-d] )) ; then
        stow_dir="$opt_args[-d]"
      elif (( $+opt_args[--dir] )) ; then
        stow_dir="$opt_args[--dir]"
      elif (( $+STOW_DIR )) ; then
        # if not provided from the command line, for the stow command, the stow
        # directory is assumed to be the value of the "STOW_DIR" environment
        # variable...
        stow_dir="$STOW_DIR"
      else
        # ...if unset, the stow directory is assumed to be the current directory
        stow_dir="$PWD"
      fi

      __stow_complete_packages "$stow_dir"

      ;;
  esac

  return ret
}

_chkstow(){
  local arguments
  arguments=(
    '(-t --target)'{-t+,--target=}'[set the target directory (default is /usr/local/)]:target dir:_files -/'
    '(-b --badlinks)'{-b,--badlinks}'[report symlinks that point to non-existent files (default mode)]'
    '(-a --aliens)'{-a,--aliens}'[report non-symlinks in the target directory]'
    '(-l --list)'{-l,--list}'[list packages in the target directory]'
  )
  _arguments -W $arguments
}

case $service in
  (stow)    _stow    ;;
  (chkstow) _chkstow ;;
esac

